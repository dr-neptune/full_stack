* Part 0 | Fundamentals of Web Apps 

** Fundamentals of Web Apps 

*** HTTP GET 

The server and web browser communicate with each other using the HTTP protocol. The network tab shows how the browser and server communicate. 

*** Traditional Web Applications 

#+BEGIN_SRC js
const getFrontPageHtml = (noteCount) => {
    return()
}
#+END_SRC



#+BEGIN_SRC javascript
const getFrontPageHtml = (noteCount) => {
    return(`
    <!DOCTYPE html>
    <html>
      <head>
      </head>
      <body>
        <div class='container'>
          <h1>Full stack example app</h1>
          <p>Number of notes created ${noteCount}</p>
          <a href='/notes'>notes</a>
          <img src='kuva.png' width='200' />
        </div>
      </body>
    </html>
    `)}

app.get('/', (req, res) => {
    const page = getFrontPageHtml(notes.length)
    res.send(page)
})
#+END_SRC

The example above saves the content of the HTML page as a string with a dynamic variable in the middle of it (noteCount). The current number of notes in the code notes.length replaces the noteCount

*** Running Application Logic on the Browser 

When we compare the page in the browser and the code returned by the server, we notice that there is no notes. This can be found by clicking the script main.js in the console, which returns the following code:

#+BEGIN_SRC javascript
var xhttp = new XMLHttpRequest()

// create event handler for event onreadystatechange for the xhttp object
xhttp.onreadystatechange = function() {
    // when operation is complete and the http response is 200 
    if (this.readyState == 4 && this.status == 200) {
        // parse json data
        const data = JSON.parse(this.responseText)
        // log the data in the console
        console.log(data)

        // create unordered list of class notes
        var ul = document.createElement('ul')
        ul.setAttribute('class', 'notes')

        // create a list item for each note
        data.forEach(function(note) {
            var li = document.createElement('li')
            ul.appendChild(li);
            li.appendChild(document.createTextNode(note.content))
        })

        document.getElementById("notes").appendChild(ul)
    }
}

// do an HTTP GET request to the server's address /data.json
xhttp.open("GET", "/data.json", true)
xhttp.send()
#+END_SRC

Event handlers are common in javascript. They are called callback functions. 

*** Document Object Model or DOM 

We can think of HTML pages as implicit tree structures. Document Object Model, or DOM, is an API which enables programmatic modification of the element trees corresponding to web pages.  

*** Manipulating the Document-Object from the Console

The topmost node of the DOM tree of a HTML document is called the document object. 

You can access the document object by typing document in the console tab. 

*** CSS 

The head element of the HTML code of the Notes page contains a link tag, which determines that the browser must fetch a CSS style sheet from the address main.css 

CSS is a markup language used to determine the appearance of web pages.

#+BEGIN_SRC css
.container {
    padding: 10px;
    border: 1px solid;
}

.notes {
    color: blue;
}
#+END_SRC

The file defines two class selectors. These are used to select certain parts of the page and to define styling rules to style them. 

*** Loading a page containing javascript - revised 

1. The browser fetches the HTML code defining the content and the structure of the page from the server using an HTTP GET request
2. Links in the HTML code cause the browser to also fetch the CSS style sheet main.css
3. and a javascript code file main.js
4. The browser executes the javascript code. The code makes an HTTP GET request to the address "/data.json", which returns the notes as JSON data
5. When the data has been fetched, the browser executes an event handler, which renders the notes to the page using the DOM-API

*** Forms and HTTP POST 

When the button on the form is clicked, the browser will send the user input to the server. This causes altogether 5 http requests. The first one is the form submit event. 

It is an HTTP POST request to the server address new_note. The server responds with HTTP status code 302 -- a URL redirect, with which the server asks the browser to do a new HTTP GET request to the address defined in the header's location - the address notes. 

So, the browser reloads the Notes page. This causes 3 more HTTP requests: fetching the style sheet, the js code, and the raw data of the notes. 

The Form tag has attributes action and method, which define that submitting the form is done as an HTTP POST request to the address new_note. 

The code on the server responsible for the POST request is simple: 

#+BEGIN_SRC javascript
app.post('/new_note', (req, res) => {
    //  create a new note object and add it to an array called notes
    notes.push({
        // content of the note
        content: req.body.note,
        // date the note was created
        date: new Date(),
    })

    return res.redirect('/notes')
})
#+END_SRC

*** AJAX 

AJAX stands for Asynchronous Javascript and XML

*** Single Page App

In the example app, the home page works like a traditional web page: all of the logic is on the server, and the browser only renders the HTML as instructed. 

In recent years, the Single Page Application style of creating web apps has emerged. SPAs don't fetch all of their pages separately from the server like the sample app, but instead comprise only one HTML page fetched from the server, the contents of which are manipulated with JavaScript that executes in the browser. 

The SPA version of the app doesn't send the form data in the traditional way, but instead uses the JavaScript code it fetched from the server. 

#+BEGIN_SRC javascript
// fetch the form element from the page
var form = document.getElementById('notes_form')
// register an event handler to handle form submit
form.onsubmit = function(e) {
    // prevent default handling of form submit
    e.preventDefault()

    // make a new note
    var note = {
        content: e.target.elements[0].value,
        date: new Date(),
    }
    // add it to the notes list
    notes.push(note)
    e.target.elements[0].value = ''
    // rerender the notes list on the page
    redrawNotes()
    // send the new note to the server
    sendToServer(note)
}

// code for sending the note to the server
var sendToServer = function(note) {
    var xhttpForPost = new XMLHttpRequest()
    // ...

    xhttpForPost.open('POST', '/new_note_spa', true)
    xhttpForPost.setRequestHeader('Content-type', 'application/json')
    xhttpForPost.send(JSON.stringify(note))
}
#+END_SRC

** Exercises

*** 0.1: HTML

Review the basics of HTML by reading this tutorial from Mozilla: 
https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics

#+BEGIN_SRC html
<!-- attributes -->
<p class="editor-note">My cat is very grumpy</p>

<!-- nesting elements -->
<p>My cat is <strong>very</strong> grumpy.</p>

<!-- empty elements -->
<img src="images/firefox-icon.png" alt="My test image">
#+END_SRC

*Anatomy of an HTML document*

#+BEGIN_SRC html
<!-- needed to make sure the document behaves correctly -->
<!DOCTYPE html>
<!-- wraps all the content on the page -->
<html>
  <!-- acts as a container for all the stuff included that isn't the page content -->
  <head>
    <!-- character set for the document -->
    <meta charset="utf-8">
    <!-- sets the title of the page -->
    <title>My test page</title>
  </head>
  <!-- contains all the content -->
  <body>
    <img src="images/firefox-icon.png" alt="My test image">
  </body>
</html>
#+END_SRC

Other stuff: 

#+BEGIN_SRC html
<!-- headers -->
<h1>Hello, world!</h1>
<h2>Hello, world!</h2>
<h3>Hello, world!</h3>
<h4>Hello, world!</h4>
<h5>Hello, world!</h5>
<h6>Hello, world!</h6>

<!-- lists -->
<ul>
  <li>list item 1</li>
  <li>list item 2</li>
  <li>list item 3</li>
</ul>

<!-- links -->
<a href="https://www.mozilla.org/en-US/about/manifesto/">Mozilla Manifesto</a>
#+END_SRC

*** 0.2: CSS 

Review the basics of CSS by reading this tutorial from Mozilla: 
https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics

CSS is a style sheet language

#+BEGIN_SRC css
p {
    color: red;
}
#+END_SRC

#+BEGIN_SRC css
p {
    color: green;
}
#+END_SRC


The whole structure above is called a ruleset. It consists of the following individual parts: 

- Selector: this is the html name at the beginning of the ruleset, i.e. p
- Declaration: this is a single rule, like color: red
- Properties: These are the ways in which you can style an element, i.e. color is a property of the p tag
- Property Value: To the right of the property, is the value 

#+BEGIN_SRC css
/* modify multiple property values with one ruleset */
p {
    color: red;
    width: 500px;
    border: 1px solid black;
}

/* select multiple elements and apply a single ruleset to all of them */
p, li, h1 {
    color: blue;
}
#+END_SRC

| Selector Name | What it selects           | Example                                 |
|---------------+---------------------------+-----------------------------------------|
| Element       | All HTML elements         | <p>                                     |
| ID            | Element with ID           | #my-id -> <p id="my-id">                |
| Class         | Elements with Class       | .my-class -> <p class="my-class">       |
| Attribute     | Elements with Attribute   | img[src] -> <img src="..."> not <img>   |
| Pseudo-class  | Element in specific state | a:hover -> <a> only when mouse hovering |

*Fonts and Text*

#+BEGIN_SRC css :tangle style.css
/* replace font with open sans in page */
html {
    font-size: 10px;
    font-family: "Open Sans", sans-serif;
}

/* set sizes for elements inside the html body */
h1 {
    font-size: 60px;
    text-align: center;
}

p, li {
    font-size: 16px;
    line-height: 2;
    letter-spacing: 1px;
}
#+END_SRC

*CSS: All About Boxes*

#+BEGIN_SRC css :tangle style.css
/* change page color */
html {
    background-color: #00539F;
}

/* style the page body */
body {
    width: 600px;
    margin: 0 auto;
    background-color: #FF9500;
    padding: 0 20px 20px 20px;
    border: 5px solid black;
}

/* position and style the main page title */
h1 {
    margin: 0;
    padding: 20px 0;
    color: #00539F;
    text-shadow: 3px 3px 1px black; /* horizontal offset, vertical offset, blur radius, base color */
}

/* center the image  */
img {
    display: block;
    margin: 0 auto;
}
#+END_SRC

*** 0.3: HTML Forms

Web forms are one of the main points of interaction between a user and a web site or application. 

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <title>My test page</title>
  </head>
  <body>
    <p>This is my page</p>
  </body>
</html>
#+END_SRC

All forms start with a form element: 

#+BEGIN_SRC html
<form action="/my-handling-form-page" method="post"> </form>
#+END_SRC

- The action attribute defines the location (URL) where the form's collected data should be sent when it is submitted
- The method attribute defines which HTTP method to send the data with (usually get or post)

#+BEGIN_SRC html
<!-- rough widget -->
<form action="/my-handling-form-page" method="post">
  <ul>
    <li>
      <label for="name">Name:</label>
      <input type="text" id="name" name="user_name">
    </li>
    <li>
      <label for="mail">E-mail:</label>
      <input type="email" id="mail" name="user_email">
    </li>
    <li>
      <label for="msg">Message:</label>
      <textarea id="msg" name="user_message"></textarea>
    </li>
  </ul>
</form>
#+END_SRC


#+BEGIN_SRC html
<!-- If we wish to define default values -->
<input type="text" value="By default this element is filled with this text">

<textarea>
  By default this element is filled with this text
</textarea>

<!-- add button -->
<li class="button">
  <button type="submit">Send your message</button>
</li>
#+END_SRC

#+BEGIN_SRC html :tangle simple.html
<!-- less rough widget -->
<form action="/my-handling-form-page" method="post">
  <ul>
    <li>
      <label for="name">Name:</label>
      <input type="text" id="name" name="user_name">
    </li>
    <li>
      <label for="mail">E-mail:</label>
      <input type="email" id="mail" name="user_email">
    </li>
    <li>
      <label for="msg">Message:</label>
      <textarea id="msg" name="user_message"></textarea>
    </li>
    <li class="button">
      <button type="submit">Send your message</button>
    </li>
  </ul>
</form>
#+END_SRC

This looks bad. We can add CSS to the form in the html: 

#+BEGIN_SRC html :tangle simple2.html
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <title>My test page</title>
    <style>
      form {
          /* Center the form on the page */
          margin: 0 auto;
          width: 400px;
          /* Form outline */
          padding: 1em;
          border: 1px solid #CCC;
          border-radius: 1em;
      }

      ul {
          list-style: none;
          padding: 0;
          margin: 0;
      }

      form li + li {
          margin-top: 1em;
      }

      label {
          /* Uniform size & alignment */
          display: inline-block;
          width: 90px;
          text-align: right;
      }

      input, 
      textarea {
          /* To make sure that all text fields have the same font settings
           By default, textareas have a monospace font */
          font: 1em sans-serif;

          /* Uniform text field size */
          width: 300px;
          box-sizing: border-box;

          /* Match form field borders */
          border: 1px solid #999;
      }

      input:focus, 
      textarea:focus {
          /* Additional highlight for focused elements */
          border-color: #000;
      }

      textarea {
          /* Align multiline text fields with their labels */
          vertical-align: top;

          /* Provide space to type some text */
          height: 5em;
      }

      .button {
          /* Align buttons with the text fields */
          padding-left: 90px; /* same size as the label elements */
      }

      button {
          /* This extra margin represent roughly the same space as the space
           between the labels and their text fields */
          margin-left: .5em;
      }
    </style>
  </head>
  <body>
    <form action="/my-handling-form-page" method="post">
      <ul>
        <li>
          <label for="name">Name:</label>
          <input type="text" id="name" name="user_name">
        </li>
        <li>
          <label for="mail">E-mail:</label>
          <input type="email" id="mail" name="user_email">
        </li>
        <li>
          <label for="msg">Message:</label>
          <textarea id="msg" name="user_message"></textarea>
        </li>
        <li class="button">
          <button type="submit">Send your message</button>
        </li>
      </ul>
    </form>
  </body>
</html>
#+END_SRC

*** 0.4: New Note

Create a similar diagram to the example below where the user creates a new note on the notes page by writing something into the text field and clicking the submit button. 

#+BEGIN_SRC text
browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/notes
server-->browser: HTML-code
browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/main.css
server-->browser: main.css
browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/main.js
server-->browser: main.js

note over browser:
browser starts executing js-code
that requests JSON data from server 
end note

browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/data.json
server-->browser: [{ content: "HTML is easy", date: "2019-05-23" }, ...]

note over browser:
browser executes the event handler
that renders notes to display
end note
#+END_SRC

With Notes:

#+BEGIN_SRC text
browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/notes
server-->browser: HTML-code
browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/main.css
server-->browser: main.css
browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/main.js
server-->browser: main.js

note over browser:
browser starts executing js-code
that requests JSON data from server
end note

browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/data.json
server-->browser: [{ content: "HTML is easy", date: "2019-05-23" }, ...]

note over browser:
browser executes the event handler
that renders notes to display
end note
#+END_SRC

